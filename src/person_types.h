/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef person_TYPES_H
#define person_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class SearchResult;

class PersonSearchResult;

typedef struct _SearchResult__isset {
  _SearchResult__isset() : score(false), x(false), y(false), width(false), height(false) {}
  bool score :1;
  bool x :1;
  bool y :1;
  bool width :1;
  bool height :1;
} _SearchResult__isset;

class SearchResult : public virtual ::apache::thrift::TBase {
 public:

  SearchResult(const SearchResult&);
  SearchResult& operator=(const SearchResult&);
  SearchResult() : score(0), x(0), y(0), width(0), height(0) {
  }

  virtual ~SearchResult() noexcept;
  double score;
  int32_t x;
  int32_t y;
  int32_t width;
  int32_t height;

  _SearchResult__isset __isset;

  void __set_score(const double val);

  void __set_x(const int32_t val);

  void __set_y(const int32_t val);

  void __set_width(const int32_t val);

  void __set_height(const int32_t val);

  bool operator == (const SearchResult & rhs) const
  {
    if (!(score == rhs.score))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(width == rhs.width))
      return false;
    if (!(height == rhs.height))
      return false;
    return true;
  }
  bool operator != (const SearchResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SearchResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SearchResult &a, SearchResult &b);

std::ostream& operator<<(std::ostream& out, const SearchResult& obj);

typedef struct _PersonSearchResult__isset {
  _PersonSearchResult__isset() : errorCode(false), errorMsg(false), result(false) {}
  bool errorCode :1;
  bool errorMsg :1;
  bool result :1;
} _PersonSearchResult__isset;

class PersonSearchResult : public virtual ::apache::thrift::TBase {
 public:

  PersonSearchResult(const PersonSearchResult&);
  PersonSearchResult& operator=(const PersonSearchResult&);
  PersonSearchResult() : errorCode(0), errorMsg() {
  }

  virtual ~PersonSearchResult() noexcept;
  int32_t errorCode;
  std::string errorMsg;
  std::vector<SearchResult>  result;

  _PersonSearchResult__isset __isset;

  void __set_errorCode(const int32_t val);

  void __set_errorMsg(const std::string& val);

  void __set_result(const std::vector<SearchResult> & val);

  bool operator == (const PersonSearchResult & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(errorMsg == rhs.errorMsg))
      return false;
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const PersonSearchResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PersonSearchResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PersonSearchResult &a, PersonSearchResult &b);

std::ostream& operator<<(std::ostream& out, const PersonSearchResult& obj);



#endif
