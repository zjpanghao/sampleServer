/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HelmetService_H
#define HelmetService_H

#include <thrift/TDispatchProcessor.h>
#include "helmet_types.h"



class HelmetServiceIf {
 public:
  virtual ~HelmetServiceIf() {}
  virtual bool checkHelmet(const std::string& image) = 0;
};

class HelmetServiceIfFactory {
 public:
  typedef HelmetServiceIf Handler;

  virtual ~HelmetServiceIfFactory() {}

  virtual HelmetServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HelmetServiceIf* /* handler */) = 0;
};

class HelmetServiceIfSingletonFactory : virtual public HelmetServiceIfFactory {
 public:
  HelmetServiceIfSingletonFactory(const boost::shared_ptr<HelmetServiceIf>& iface) : iface_(iface) {}
  virtual ~HelmetServiceIfSingletonFactory() {}

  virtual HelmetServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HelmetServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<HelmetServiceIf> iface_;
};

class HelmetServiceNull : virtual public HelmetServiceIf {
 public:
  virtual ~HelmetServiceNull() {}
  bool checkHelmet(const std::string& /* image */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _HelmetService_checkHelmet_args__isset {
  _HelmetService_checkHelmet_args__isset() : image(false) {}
  bool image;
} _HelmetService_checkHelmet_args__isset;

class HelmetService_checkHelmet_args {
 public:

  HelmetService_checkHelmet_args() : image() {
  }

  virtual ~HelmetService_checkHelmet_args() throw() {}

  std::string image;

  _HelmetService_checkHelmet_args__isset __isset;

  void __set_image(const std::string& val) {
    image = val;
  }

  bool operator == (const HelmetService_checkHelmet_args & rhs) const
  {
    if (!(image == rhs.image))
      return false;
    return true;
  }
  bool operator != (const HelmetService_checkHelmet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelmetService_checkHelmet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HelmetService_checkHelmet_pargs {
 public:


  virtual ~HelmetService_checkHelmet_pargs() throw() {}

  const std::string* image;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HelmetService_checkHelmet_result__isset {
  _HelmetService_checkHelmet_result__isset() : success(false) {}
  bool success;
} _HelmetService_checkHelmet_result__isset;

class HelmetService_checkHelmet_result {
 public:

  HelmetService_checkHelmet_result() : success(0) {
  }

  virtual ~HelmetService_checkHelmet_result() throw() {}

  bool success;

  _HelmetService_checkHelmet_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const HelmetService_checkHelmet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HelmetService_checkHelmet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelmetService_checkHelmet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HelmetService_checkHelmet_presult__isset {
  _HelmetService_checkHelmet_presult__isset() : success(false) {}
  bool success;
} _HelmetService_checkHelmet_presult__isset;

class HelmetService_checkHelmet_presult {
 public:


  virtual ~HelmetService_checkHelmet_presult() throw() {}

  bool* success;

  _HelmetService_checkHelmet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class HelmetServiceClient : virtual public HelmetServiceIf {
 public:
  HelmetServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  HelmetServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool checkHelmet(const std::string& image);
  void send_checkHelmet(const std::string& image);
  bool recv_checkHelmet();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HelmetServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<HelmetServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HelmetServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_checkHelmet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HelmetServiceProcessor(boost::shared_ptr<HelmetServiceIf> iface) :
    iface_(iface) {
    processMap_["checkHelmet"] = &HelmetServiceProcessor::process_checkHelmet;
  }

  virtual ~HelmetServiceProcessor() {}
};

class HelmetServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HelmetServiceProcessorFactory(const ::boost::shared_ptr< HelmetServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< HelmetServiceIfFactory > handlerFactory_;
};

class HelmetServiceMultiface : virtual public HelmetServiceIf {
 public:
  HelmetServiceMultiface(std::vector<boost::shared_ptr<HelmetServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HelmetServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HelmetServiceIf> > ifaces_;
  HelmetServiceMultiface() {}
  void add(boost::shared_ptr<HelmetServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool checkHelmet(const std::string& image) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkHelmet(image);
    }
    return ifaces_[i]->checkHelmet(image);
  }

};



#endif
